@model IEnumerable<Sales.Models.Count>
@{
    ViewBag.Title = "Count Edit/Delete";
    int currentPage = ViewBag.CurrentPage;
    int totalPages = ViewBag.TotalPages;
}
<h2 style="background-color: #007bb5; color: white; padding: 15px; text-align: center; border-radius: 8px;">COUNT</h2>

<style>
    /* Layout Styling */
    .header-actions {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin: 20px;
    }

    .search-box {
        width: 200px;
        padding: 10px;
        border: 1px solid #ccc;
        border-radius: 4px;
        font-size: 16px;
    }

    .btn-add {
        background-color: #4caf50;
        color: white;
        padding: 10px 20px;
        border: none;
        border-radius: 4px;
        cursor: pointer;
        transition: 0.3s;
    }

        .btn-add:hover {
            background-color: #45a049;
        }

    /* Table Styling */
    .grid-table {
        width: 100%;
        border-collapse: collapse;
        margin: 20px auto;
    }

        .grid-table th,
        .grid-table td {
            border: 1px solid #ddd;
            padding: 10px;
            text-align: left;
        }

        .grid-table th {
            background-color: black;
            color: white;
        }

        .grid-table tr:nth-child(even) {
            background-color: #f9f9f9;
        }

        .grid-table tr:hover {
            background-color: #f1f1f1;
        }

    .action-buttons {
        display: flex;
        gap: 10px;
    }

    .btn {
        padding: 6px 12px;
        border: none;
        border-radius: 4px;
        cursor: pointer;
        transition: 0.3s;
    }

    .btn-edit {
        background-color: #ff9800;
        color: white;
    }

        .btn-edit:hover {
            background-color: #fb8c00;
        }

    .btn-delete {
        background-color: #f44336;
        color: white;
    }

        .btn-delete:hover {
            background-color: #e53935;
        }

    .pagination {
        display: flex;
        justify-content: center;
        align-items: center;
        margin: 20px 0;
        gap: 10px;
    }

        .pagination button {
            padding: 10px 20px;
            font-size: 16px;
            border: none;
            border-radius: 4px;
            cursor: pointer;
            transition: background-color 0.3s ease;
        }

            .pagination button:disabled {
                background-color: #ccc;
                cursor: not-allowed;
            }

        .pagination span {
            font-size: 16px;
            font-weight: bold;
        }

    .back-btn {
        background-color: aquamarine; /* Warm Brown */
        color: black; /* White text */
        border: none; /* No border */
        padding: 5px 20px; /* Adjust spacing */
        border-radius: 5px; /* Rounded corners */
        font-size: 16px; /* Adjust font size */
        cursor: pointer; /* Pointer cursor on hover */
        box-shadow: 2px 2px 5px rgba(0, 0, 0, 0.2); /* Subtle shadow */
        transition: background-color 0.3s ease, transform 0.2s ease; /* Smooth transition */
    }

        .back-btn:hover {
            background-color: azure; /* Darker Brown for hover */
            transform: scale(1.05); /* Slightly larger on hover */
        }

        .back-btn:active {
            background-color: #6c4f29; /* Even darker Brown for active state */
            transform: scale(0.95); /* Slightly smaller on click */
        }
</style>

<div class="header-actions">
    <input type="text" id="searchBox" class="search-box" placeholder="Search by Count Code..." onkeyup="searchCounts()">
    <button class="btn-add" onclick="window.location.href='/Count/Create'">Add New Count</button>
</div>

<table class="grid-table" id="gridTable">
    <thead>
        <tr>
            <th>Count ID</th>
            <th>Count Code</th>
            <th>Description</th>
            <th>Actions</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var count in Model)
        {
            <tr data-code="@count.CountCode">
                <td>@count.CountId</td>
                <td>@count.CountCode</td>
                <td>@count.CountDescription</td>
                <td>
                    <div class="action-buttons">
                        <button class="btn btn-edit" onclick="openEditModal(@count.CountId, '@count.CountCode', '@count.CountDescription')">Edit</button>
                        <button class="btn btn-delete" onclick="openDeleteModal(@count.CountId)">Delete</button>
                    </div>
                </td>
            </tr>
        }
    </tbody>
</table>

<button type="button" class="back-btn" onclick="location.href='@Url.Action("Success", "Account")'">
            Back
        </button>
<!-- Pagination -->
<div class="pagination">
    @if (currentPage > 1)
    {
        <a href="@Url.Action("CountEditDelete", "Count", new { page = currentPage - 1 })" class="btn btn-secondary">Back</a>
    }

    <span>Page @currentPage of @totalPages</span>

    @if (currentPage < totalPages)
    {
        <a href="@Url.Action("CountEditDelete", "Count", new { page = currentPage + 1 })" class="btn btn-primary">Next</a>
    }
</div>



<!-- Edit Modal -->
<div id="editModal" class="modal" tabindex="-1" role="dialog">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header" style="background-color: #4caf50; color: white;">
                <h5 class="modal-title">Edit Count</h5>
                <button type="button" class="close" onclick="closeModal('editModal')">&times;</button>
            </div>
            <div class="modal-body">
                <form id="editForm" method="post" action="/Count/Edit">
                    @Html.AntiForgeryToken()
                    <input type="hidden" id="CountId" name="CountId" />
                    <div class="form-group">
                        <label for="EditCountCode">Count Code</label>
                        <input type="text" id="EditCountCode" name="CountCode" class="form-control" />
                    </div>
                    <div class="form-group">
                        <label for="EditCountDescription">Count Description</label>
                        <textarea id="EditCountDescription" name="CountDescription" class="form-control"></textarea>
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="submit" form="editForm" class="btn btn-edit">Save</button>
                <button type="button" class="btn btn-delete" onclick="closeModal('editModal')">Cancel</button>
            </div>
        </div>
    </div>
</div>

<!-- Delete Modal -->
<div id="deleteModal" class="modal" tabindex="-1" role="dialog">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header" style="background-color: #f44336; color: white;">
                <h5 class="modal-title">Confirm Delete</h5>
                <button type="button" class="close" onclick="closeModal('deleteModal')">&times;</button>
            </div>
            <div class="modal-body">
                <p>Are you sure you want to delete this count?</p>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-delete" onclick="confirmDelete()">Yes, Delete</button>
                <button type="button" class="btn btn-edit" onclick="closeModal('deleteModal')">Cancel</button>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        let deleteId = null;

        function openEditModal(id, code, description) {
            document.getElementById('CountId').value = id;
            document.getElementById('EditCountCode').value = code;
            document.getElementById('EditCountDescription').value = description;
            $('#editModal').modal('show');
        }

        function openDeleteModal(id) {
            deleteId = id;
            $('#deleteModal').modal('show');
        }

        function closeModal(modalId) {
            $(`#${modalId}`).modal('hide');
        }

        function confirmDelete() {
            if (deleteId) {
                $.post('/Count/Delete', { id: deleteId })
                    .done(function (response) {
                        alert(response.message);
                        if (response.success) {
                            location.reload();
                        }
                    })
                    .fail(function () {
                        alert("An error occurred. Please try again.");
                    });
            }
        }

        function searchCounts() {
            const searchValue = document.getElementById('searchBox').value.toLowerCase();
            const gridItems = document.querySelectorAll('.grid-item');

            gridItems.forEach(item => {
                const countCode = item.getAttribute('data-code').toLowerCase();
                if (countCode.includes(searchValue)) {
                    item.style.display = 'block';
                } else {
                    item.style.display = 'none';
                }
            });
        }
    </script>

    <script>
        function searchCounts() {
            const searchValue = document.getElementById('searchBox').value.toLowerCase();
            const rows = document.querySelectorAll('#gridTable tbody tr');

            rows.forEach(row => {
                const countCode = row.getAttribute('data-code').toLowerCase();
                row.style.display = countCode.includes(searchValue) ? 'table-row' : 'none';
            });
        }
    </script>

    <script>
        // AJAX-based form submission for editing
        document.getElementById('editForm').addEventListener('submit', function (event) {
            event.preventDefault(); // Prevent form from submitting the default way

            const formData = new FormData(this); // Gather form data
            const url = this.action; // Get the action URL from the form

            fetch(url, {
                method: 'POST',
                body: formData,
                headers: {
                    'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value,
                }
            })
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        // Update the table row with the new data
                        const row = document.querySelector(`tr[data-code="${data.oldCode}"]`);
                        row.setAttribute('data-code', data.newData.CountCode);
                        row.querySelector('td:nth-child(2)').textContent = data.newData.CountCode;
                        row.querySelector('td:nth-child(3)').textContent = data.newData.CountDescription;

                        // Close the modal
                        closeModal('editModal');

                        // Optional: Show a success message
                        alert('Count updated successfully!');
                    } else {
                        // Handle any validation errors
                        alert(data.message || 'Failed to update count.');
                    }
                })
                .catch(() => {
                    alert('An error occurred. Please try again.');
                });
        });
    </script>
}