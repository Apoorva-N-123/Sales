@model Sales.Models.Orders
@{
    ViewData["Title"] = "Order Registration";
}

<style>
    /* General Styling */
    body {
        font-family: 'Arial', sans-serif;
        background-color: #f4f7fc;
    }

    /* Form Container */
    .order-registration-form {
        margin: 30px auto;
        max-width: 1200px;
        background: #fff;
        padding: 20px;
        border-radius: 8px;
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
    }

    /* Section Headers */
    .form-section h3 {
        color: #333;
        font-size: 18px;
        margin-bottom: 15px;
        border-bottom: 2px solid #e4e4e4;
        padding-bottom: 10px;
    }

    /* Form Rows */
    .form-row {
        display: flex;
        gap: 20px;
        margin-bottom: 20px;
    }

    /* Form Fields */
    .form-group {
        margin-bottom: 15px;
    }

    .form-control {
        padding: 10px;
        font-size: 14px;
        border: 1px solid #ccc;
        border-radius: 4px;
    }

    /* Buttons */
    .btn {
        padding: 8px 16px;
        font-size: 14px;
        border-radius: 4px;
        transition: all 0.3s ease;
    }

    .btn-success {
        background-color: #28a745;
        color: white;
    }

    .btn-danger {
        background-color: #dc3545;
        color: white;
    }

    .btn-primary {
        background-color: #007bff;
        color: white;
    }

    .btn:hover {
        opacity: 0.8;
    }

    /* Table Styling */
    .table {
        width: 100%;
        border-collapse: collapse;
        margin-top: 20px;
    }

        .table th, .table td {
            padding: 12px;
            text-align: left;
        }

        .table th {
            background-color: #f8f9fa;
            color: #495057;
        }

        .table td {
            background-color: #fff;
            border-top: 1px solid #e9ecef;
        }

    /* Modal Styling */
    .modal-content {
        border-radius: 8px;
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
    }

    .modal-header {
        background-color: #f8f9fa;
        border-bottom: 1px solid #ddd;
    }

    .modal-footer {
        background-color: #f8f9fa;
        border-top: 1px solid #ddd;
    }

    /* Modal Table */
    .table-striped tbody tr:nth-of-type(odd) {
        background-color: #f9f9f9;
    }

    .table-striped tbody tr:nth-of-type(even) {
        background-color: #ffffff;
    }

    .table th, .table td {
        padding: 12px 16px;
    }

    /* Modal Close Button */
    .btn-close {
        background-color: #6c757d;
        color: white;
        border-radius: 50%;
        padding: 6px 12px;
    }
</style>

<center><h2><b>ORDER REGISTRATION</b></h2></center>
<div class="order-registration-form">
    <form action="@Url.Action("Register", "Order")" method="post">
        @Html.AntiForgeryToken()

        <!-- Order Information Section -->
        <div class="form-section">
            <h3><b>Order Information</b></h3>
            <div class="form-row">
                <div class="form-group col-md-4">
                    <label for="OrderReferenceNumber">Order Reference Number</label>
                    <input type="text" name="OrderReferenceNumber" class="form-control" />
                    @Html.ValidationMessageFor(model => model.OrderReferenceNumber, "", new { @class = "text-danger" })
                </div>

                <div class="form-group col-md-4">
                    <label>Order Date</label>
                    @Html.TextBoxFor(m => m.OrderDate, new { @class = "form-control", @type = "date" })
                    @Html.ValidationMessageFor(m => m.OrderDate, "", new { @class = "text-danger" })
                </div>
                <div class="form-group col-md-4">
                    <label>Order Reference Date</label>
                    @Html.TextBoxFor(m => m.OrderReferenceDate, new { @class = "form-control", @type = "date" })
                    @Html.ValidationMessageFor(m => m.OrderReferenceDate, "", new { @class = "text-danger" })
                </div>
            </div>
        </div>

        <!-- Customer and Payment Details Section -->
        <div class="form-section">
            <h3><b>Customer & Payment Details</b></h3>
            <div class="form-row">
                <div class="form-group col-md-4">
                    <label>Customer Name</label>
                    @Html.DropDownListFor(m => m.CustomerName,
                            new SelectList(ViewBag.Customers, "", ""),
                            "Select a Customer",
                            new { @class = "form-control" })
                    @Html.ValidationMessageFor(m => m.CustomerName, "", new { @class = "text-danger" })
                </div>

                <div class="form-group col-md-4">
                    <label>Delivery Address</label>
                    @Html.TextBoxFor(m => m.DeliveryAddress, new { @class = "form-control" })
                    @Html.ValidationMessageFor(m => m.DeliveryAddress, "", new { @class = "text-danger" })
                </div>
                <div class="form-group col-md-4">
                    <label>Pay Mode</label>
                    @Html.DropDownListFor(m => m.PayMode, new SelectList(new List<string> { "Direct", "Cheque" }), "Select Pay Mode", new { @class = "form-control" })
                    @Html.ValidationMessageFor(m => m.PayMode, "", new { @class = "text-danger" })
                </div>
            </div>
        </div>

        <!-- Payment Terms Section -->
        <div class="form-section">
            <h3><b>Payment Terms</b></h3>
            <div class="form-row">
                <div class="form-group col-md-4">
                    <label>Payment Terms</label>
                    @Html.DropDownListFor(m => m.PaymentTerms,
                            new SelectList(ViewBag.PaymentTerms, "", ""),
                            "Select Payment Terms",
                            new { @class = "form-control" })
                    @Html.ValidationMessageFor(m => m.PaymentTerms, "", new { @class = "text-danger" })
                </div>
            </div>
        </div>


        <!-- Product Selection Section -->
        <div class="form-section">
            <div class="form-group">

                <h3><b>@Html.Label("Product Details")</b></h3>
                @Html.EditorFor(model => model.ProductDetails) <!-- Assuming ProductDetails is a list of products -->
                @Html.ValidationMessageFor(model => model.ProductDetails, "( Please select at least one product.)", new { @class = "text-danger" })
            </div>
            <button type="button" class="btn btn-primary" id="btnAddProduct" data-bs-toggle="modal" data-bs-target="#productModal">Add Product</button>

            <table class="table table-bordered" id="productDetailsTable">
                <thead>
                    <tr>
                        <th>Product Code</th>
                        <th>Product Description</th>
                        <th>Order Quantity</th>
                        <th>Pack Type</th>
                        <th>Rate</th>
                        <th>Action</th>
                    </tr>
                </thead>
                <tbody id="productDetailsBody">
                    <!-- Product rows will be added here -->
                </tbody>
            </table>
        </div>

        <!-- Buttons -->
        <div class="form-actions">
            <button type="submit" class="btn btn-success">Save</button>
            <button type="button" class="btn btn-danger" onclick="cancelOrder()">Cancel</button>
        </div>


        @section Scripts {
            @Scripts.Render("~/bundles/jqueryval")
        }
    </form>
</div>

<!-- Product Lookup Modal -->
<div class="modal fade" id="productModal" tabindex="-1" aria-labelledby="productModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="productModalLabel">Select Products</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <table class="table table-striped" id="lookupProductTable">
                    <thead>
                        <tr>
                            <th>Select</th>
                            <th>Product Code</th>
                            <th>Product Description</th>
                        </tr>
                    </thead>
                    <tbody id="productDetailsBody">
                        <!-- Rows will be added dynamically here -->
                    </tbody>

                </table>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-primary" id="btnAddSelectedProducts">Add Selected</button>
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
            </div>
        </div>
    </div>
</div>
<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
<script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.min.js"></script>
@if (TempData["SuccessMessage"] != null)
{
    <div class="alert alert-success">
        @TempData["SuccessMessage"]
    </div>
}

@if (TempData["ErrorMessage"] != null)
{
    <div class="alert alert-danger">
        @TempData["ErrorMessage"]
    </div>
}

<script>

    $(document).ready(function () {
    // Fetch products and populate the lookup modal when the "Add Product" button is clicked
    $('#btnAddProduct').on('click', function () {
        $.ajax({
            url: '@Url.Action("GetProducts", "Order")',  // Controller action to fetch products
            type: 'GET',
            success: function (data) {
                var rows = '';
                data.forEach(function (product) {
                    rows += `
                        <tr>
                            <td><input type="checkbox" class="product-checkbox"
                                    data-code="${product.ProductCode}"
                                    data-description="${product.ProductDescription}" /></td>
                            <td>${product.ProductCode}</td>
                            <td>${product.ProductDescription}</td>
                        </tr>
                    `;
                });
                $('#lookupProductTable tbody').html(rows);
            },
            error: function () {
                alert('Failed to load products.');
            }
        });
    });

    // Handle the "Add Selected Products" button
        $('#btnAddSelectedProducts').on('click', function () {
            var selectedProducts = [];
            $('.product-checkbox:checked').each(function () {
                var productCode = $(this).data('code');
                var productDescription = $(this).data('description');

                // Check if the product already exists in the table
                if ($("#productDetailsBody tr").filter(function () {
                    return $(this).find("td:first").text() === productCode;
                }).length === 0) {
                    selectedProducts.push({
                        code: productCode,
                        description: productDescription
                    });
                }
            });

            if (selectedProducts.length === 0) {
                alert('No products selected or they are already added.');
                return;
            }

            selectedProducts.forEach(function (product, index) {
                $('#productDetailsBody').append(`
            <tr>
                <td><input type="hidden" name="ProductDetails[${index}].ProductCode" value="${product.code}" />${product.code}</td>
                <td><input type="hidden" name="ProductDetails[${index}].ProductDescription" value="${product.description}" />${product.description}</td>
                <td><input type="number" class="form-control" name="ProductDetails[${index}].OrderQuantity" placeholder="Enter Quantity" required /></td>
                <td><input type="text" class="form-control" name="ProductDetails[${index}].PackType" placeholder="Enter Pack Type" required /></td>
                <td><input type="number" class="form-control" name="ProductDetails[${index}].Rate" placeholder="Enter Rate" required /></td>
                <td><button type="button" class="btn btn-danger btnRemoveProduct">Remove</button></td>
            </tr>
        `);
            });

            // Close the modal
            $('#productModal').modal('hide');
        });

    // Remove a product row from the table
    $('#productDetailsBody').on('click', '.btnRemoveProduct', function () {
        $(this).closest('tr').remove();
    });
});


    // Fetch products when the modal is opened
    $('#productModal').on('show.bs.modal', function () {
    $.ajax({
        url: '@Url.Action("GetProducts", "Order")',
        type: 'GET',
        success: function (products) {
            console.log(products);  // Debugging: Check if products are loaded
            var productCodeSelect = $('#productCodeSelect');
            var productDescriptionSelect = $('#productDescriptionSelect');

            productCodeSelect.empty();  // Clear existing options
            productDescriptionSelect.empty();  // Clear existing options

            // Populate the dropdowns with product data
            products.forEach(function (product) {
                productCodeSelect.append('<option value="' + product.ProductCode + '">' + product.ProductCode + '</option>');
                productDescriptionSelect.append('<option value="' + product.ProductDescription + '">' + product.ProductDescription + '</option>');
            });
        },
        error: function (err) {
            alert('Failed to load products.');
            console.log(err);  // Debugging: Check error message
        }
    });
});


    function addProductToTable() {
        var productCode = $('#productCodeSelect').val();
        var productDescription = $('#productDescriptionSelect').val();
        var orderQuantity = $('input[name="OrderQuantity"]').val();  // Get the quantity from the input
        var packType = $('input[name="PackType"]').val();  // Get the pack type
        var rate = $('input[name="Rate"]').val();  // Get the rate

        if (productCode && productDescription && orderQuantity && packType && rate) {
            // Add the selected product to the product details table
            var row = '<tr>' +
                '<td>' + productCode + '</td>' +
                '<td>' + productDescription + '</td>' +
                '<td><input type="number" name="OrderQuantity" class="form-control" value="' + orderQuantity + '" /></td>' +
                '<td><input type="text" name="PackType" class="form-control" value="' + packType + '" /></td>' +
                '<td><input type="number" name="Rate" class="form-control" value="' + rate + '" /></td>' +
                '</tr>';
            $('#productDetailsBody').append(row);

            // Clear the modal fields after adding the product
            $('#productCodeSelect').val('');
            $('#productDescriptionSelect').val('');
            $('#productModal').modal('hide');
        } else {
            alert('Please fill in all fields.');
        }
    }
    function cancelOrder() {
        alert('Order cancelled');
        window.location.href = '/Order/OrderEditDelete';  // Redirect to the order register page
    }

    window.onload = function () {
    var successMessage = "@TempData["SuccessMessage"]";  // Retrieve the message from TempData
    if (successMessage) {
        document.getElementById("popupMessage").innerText = successMessage; // Set the message text
        var modal = new bootstrap.Modal(document.getElementById("popupModal")); // Initialize the modal
        modal.show(); // Show the modal

        // When the modal is closed, reset the form fields
        document.getElementById("modalCloseButton").addEventListener("click", function () {
            document.querySelector("form").reset(); // Reset the form using JavaScript
        });
    }

    var errorMessage = "@TempData["ErrorMessage"]";  // Retrieve the error message from TempData
    if (errorMessage) {
        document.getElementById("popupMessage").innerText = errorMessage; // Set the error message text
        var modal = new bootstrap.Modal(document.getElementById("popupModal")); // Initialize the modal
        modal.show(); // Show the modal
    }
    };

    // Function to validate the product selection
    // JavaScript code for checking if products are selected
    function validateProducts() {
        var selectedProducts = []; // Assuming this contains selected products

        // Check if no products are selected
        if (selectedProducts.length === 0) {
            alert('No products selected or they are already added.');
            // Prevent form submission
            return false;
        }

        return true; // Allow form submission if products are selected
    }

    // Add this check before submitting the form
    $('#orderForm').submit(function (e) {
        if (!validateProducts()) {
            e.preventDefault(); // Prevent form submission if validation fails
        }
    });

</script>