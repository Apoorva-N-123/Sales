@model Sales.Models.Orders

@{
    ViewBag.Title = "Edit Order";
}

<h2 class="title">Edit Order</h2>


<form method="post" action="@Url.Action("Edit", "Order")" id="orderEditForm">

    @Html.AntiForgeryToken()

    @Html.HiddenFor(model => model.OrderId)

    <!-- Order Fields -->
    <label>Order Reference Number:</label>
    @Html.TextBoxFor(model => model.OrderReferenceNumber, new { @class = "input-box" })

    <label>Order Date:</label>
    @Html.TextBoxFor(model => model.OrderDate, "{0:yyyy-MM-dd}", new { @class = "input-box", type = "date" })

    <label>Order Reference Date:</label>
    @Html.TextBoxFor(model => model.OrderReferenceDate, "{0:yyyy-MM-dd}", new { @class = "input-box", type = "date" })

    <label>Customer Name:</label>
    @Html.TextBoxFor(model => model.CustomerName, new { @class = "input-box" })

    <label>Delivery Address:</label>
    @Html.TextBoxFor(model => model.DeliveryAddress, new { @class = "input-box" })

    <label>Payment Mode:</label>
    @Html.TextBoxFor(model => model.PayMode, new { @class = "input-box" })

    <label>Payment Terms:</label>
    @Html.TextBoxFor(model => model.PaymentTerms, new { @class = "input-box" })

    <!-- Product Details Section -->
    <h3>Product Details</h3>
    <table id="productDetailsTable">
        <thead>
            <tr>
                <th>Product Code</th>
                <th>Product Description</th>
                <th>Quantity</th>
                <th>Pack Type</th>
                <th>Rate</th>
            </tr>
        </thead>
        <tbody>
            @for (int i = 0; i < Model.ProductDetails.Count; i++)
            {
                <tr>
                    <td>
                        @Html.HiddenFor(m => Model.ProductDetails.ElementAt(i).ProductDetailId)
                        @Html.TextBoxFor(m => Model.ProductDetails.ElementAt(i).ProductCode, new { @class = "input-box" })
                    </td>
                    <td>
                        @Html.TextBoxFor(m => Model.ProductDetails.ElementAt(i).ProductDescription, new { @class = "input-box" })
                    </td>
                    <td>
                        @Html.TextBoxFor(m => Model.ProductDetails.ElementAt(i).OrderQuantity, new { @class = "input-box" })
                    </td>
                    <td>
                        @Html.TextBoxFor(m => Model.ProductDetails.ElementAt(i).PackType, new { @class = "input-box" })
                    </td>
                    <td>
                        @Html.TextBoxFor(m => Model.ProductDetails.ElementAt(i).Rate, new { @class = "input-box" })
                    </td>
                </tr>
            }
        </tbody>
    </table>

    <div class="buttons">
        <button type="submit" id="saveOrder" class="save-btn">Save</button>
        <a href="@Url.Action("OrderEditDelete", "Order")" class="cancel-btn">Cancel</a>
    </div>
</form>

<style>
    /* General Page Styling */
    body {
        font-family: 'Arial', sans-serif;
        background-color: #f4f4f9;
        padding: 20px;
    }

    /* Title */
    .title {
        text-align: center;
        font-size: 26px;
        font-weight: bold;
        color: #333;
        margin-bottom: 20px;
    }

    /* Form Container */
    form {
        background: #fff;
        padding: 20px;
        border-radius: 10px;
        box-shadow: 0 4px 10px rgba(0, 0, 0, 0.1);
        max-width: 900px;
        margin: auto;
    }

    /* Labels */
    label {
        font-weight: bold;
        margin-top: 12px;
        display: block;
        color: #333;
    }

    /* Form Input Fields */
    .input-box {
        width: 100%;
        padding: 10px;
        margin-top: 5px;
        border: 1px solid #ccc;
        border-radius: 5px;
        font-size: 14px;
    }

    /* Readonly Fields */
    input[readonly] {
        background-color: #e9ecef;
        cursor: not-allowed;
    }

    /* Product Details Section */
    h3 {
        text-align: center;
        font-size: 20px;
        margin-top: 20px;
        color: #007bff;
    }

    /* Table Styling */
    #productDetailsTable {
        width: 100%;
        border-collapse: collapse;
        margin-top: 15px;
        background: #fff;
    }

        #productDetailsTable th,
        #productDetailsTable td {
            border: 1px solid #ddd;
            padding: 10px;
            text-align: center;
        }

        #productDetailsTable th {
            background-color: #007bff;
            color: white;
            font-weight: bold;
        }

    /* Buttons Section */
    .buttons {
        display: flex;
        justify-content: center;
        gap: 15px;
        margin-top: 20px;
    }

    /* Save Button */
    .save-btn {
        background-color: #28a745;
        color: white;
        padding: 10px 15px;
        border: none;
        border-radius: 5px;
        font-size: 14px;
        cursor: pointer;
        transition: 0.3s;
    }

        .save-btn:hover {
            background-color: #218838;
        }

    /* Cancel Button */
    .cancel-btn {
        background-color: #dc3545;
        color: white;
        padding: 10px 15px;
        border: none;
        border-radius: 5px;
        font-size: 14px;
        cursor: pointer;
        text-decoration: none;
        transition: 0.3s;
    }

        .cancel-btn:hover {
            background-color: #c82333;
        }
</style>

<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script> <!-- Ensure jQuery is included -->

<script>
    $(document).ready(function () {
        // Handle Save button click event
        $("#saveOrder").click(function (e) {
            e.preventDefault(); // Prevent default form submission

            var token = $('input[name="__RequestVerificationToken"]').val();
            var formData = $("#orderEditForm").serialize(); // Serialize form data

            $.ajax({
                url: "/Order/Edit",
                type: "POST",
                data: formData,
                success: function (response) {
                    Swal.fire({
                        title: "Updated Successfully",
                        text: "Order updated successfully!",
                        icon: "success",
                        confirmButtonText: "OK"
                    }).then(() => {
                        // Redirect to OrderEditDelete.cshtml after clicking OK
                        window.location.href = "/Order/OrderEditDelete";
                    });
                },
                error: function () {
                    Swal.fire({
                        title: "Error!",
                        text: "Error updating order.",
                        icon: "error",
                        confirmButtonText: "OK"
                    });
                }
            });
        });

        // Handle Cancel button click event
        $(".cancel-btn").click(function (e) {
            e.preventDefault(); // Prevent direct navigation

            Swal.fire({
                title: "Order Updation Cancelled",
                text: "Order updation cancelled successfully!",
                icon: "warning",
                confirmButtonText: "OK"
            }).then(() => {
                // Redirect to OrderEditDelete.cshtml after clicking OK
                window.location.href = "/Order/OrderEditDelete";
            });
        });
    });
</script>

